/*
 *    MCreator note:
 *
 *    If you lock base mod element files, you can edit this file and the proxy files
 *    and they won't get overwritten. If you change your mod package or modid, you
 *    need to apply these changes to this file MANUALLY.
 *
 *    Settings in @Mod annotation WON'T be changed in case of the base mod element
 *    files lock too, so you need to set them manually here in such case.
 *
 *    Keep the ElementsCitySuperMod object in this class and all calls to this object
 *    INTACT in order to preserve functionality of mod elements generated by MCreator.
 *
 *    If you do not lock base mod element files in Workspace settings, this file
 *    will be REGENERATED on each build.
 *
 */
package com.micatechnologies.minecraft.csm;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.potion.Potion;
import net.minecraft.world.biome.Biome;
import net.minecraftforge.client.event.ModelRegistryEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fluids.FluidRegistry;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import net.minecraftforge.fml.common.registry.EntityEntry;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import java.util.function.Supplier;

@Mod( modid = ModConstants.MOD_NAMESPACE, version = ModConstants.MOD_VERSION )
public class CitySuperMod
{
    public static final SimpleNetworkWrapper PACKET_HANDLER = NetworkRegistry.INSTANCE.newSimpleChannel(
            ModConstants.MOD_NAMESPACE + ":a" );
    @SidedProxy( clientSide = "com.micatechnologies.minecraft.csm.ClientProxyCitySuperMod", serverSide = "com.micatechnologies.minecraft.csm.ServerProxyCitySuperMod" )
    public static       IProxyCitySuperMod   proxy;
    @Mod.Instance( ModConstants.MOD_NAMESPACE )
    public static       CitySuperMod         instance;

    static {
        FluidRegistry.enableUniversalBucket();
    }

    public ElementsCitySuperMod elements = new ElementsCitySuperMod();

    @Mod.EventHandler
    public void preInit( FMLPreInitializationEvent event ) {
        MinecraftForge.EVENT_BUS.register( this );
        GameRegistry.registerWorldGenerator( elements, 5 );
        GameRegistry.registerFuelHandler( elements );
        elements.preInit( event );
        MinecraftForge.EVENT_BUS.register( elements );
        elements.getElements().forEach( element -> element.preInit( event ) );
        proxy.preInit( event );
    }

    @Mod.EventHandler
    public void init( FMLInitializationEvent event ) {
        elements.getElements().forEach( element -> element.init( event ) );
        NetworkRegistry.INSTANCE.registerGuiHandler( this, new ElementsCitySuperMod.GuiHandler() );
        proxy.init( event );
    }

    @Mod.EventHandler
    public void postInit( FMLPostInitializationEvent event ) {
        proxy.postInit( event );
    }

    @Mod.EventHandler
    public void serverLoad( FMLServerStartingEvent event ) {
        elements.getElements().forEach( element -> element.serverLoad( event ) );
        proxy.serverLoad( event );
    }

    @SubscribeEvent
    public void registerBlocks( RegistryEvent.Register< Block > event ) {
        event.getRegistry().registerAll( elements.getBlocks().stream().map( Supplier::get ).toArray( Block[]::new ) );
    }

    @SubscribeEvent
    public void registerItems( RegistryEvent.Register< Item > event ) {
        event.getRegistry().registerAll( elements.getItems().stream().map( Supplier::get ).toArray( Item[]::new ) );
    }

    @SubscribeEvent
    public void registerBiomes( RegistryEvent.Register< Biome > event ) {
        event.getRegistry().registerAll( elements.getBiomes().stream().map( Supplier::get ).toArray( Biome[]::new ) );
    }

    @SubscribeEvent
    public void registerEntities( RegistryEvent.Register< EntityEntry > event ) {
        event.getRegistry()
             .registerAll( elements.getEntities().stream().map( Supplier::get ).toArray( EntityEntry[]::new ) );
    }

    @SubscribeEvent
    public void registerPotions( RegistryEvent.Register< Potion > event ) {
        event.getRegistry().registerAll( elements.getPotions().stream().map( Supplier::get ).toArray( Potion[]::new ) );
    }

    @SubscribeEvent
    public void registerSounds( RegistryEvent.Register< net.minecraft.util.SoundEvent > event ) {
        elements.registerSounds( event );
    }

    @SubscribeEvent
    @SideOnly( Side.CLIENT )
    public void registerModels( ModelRegistryEvent event ) {
        elements.getElements().forEach( element -> element.registerModels( event ) );
    }
}
