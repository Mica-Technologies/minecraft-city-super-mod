public static final PropertyBool POWERED = PropertyBool.create("powered");

		@Override
		public void neighborChanged(IBlockState state, World world, BlockPos pos, Block blockIn, BlockPos p_189540_5_) {
			int powered = world.isBlockIndirectlyGettingPowered(pos);
			world.setBlockState(pos, state.withProperty(POWERED, powered > 0), 3);
			// Powered, Add Light
			if (powered > 0) {
				BlockPos doAddAt = null;
				for (int findy = -1; findy >= -40; findy--) {
					BlockPos test = new BlockPos(pos.getX(), pos.getY() +findy, pos.getZ());
					IBlockState bs = world.getBlockState(test);
					Block block = bs.getBlock();
					// found block that is not air
					if (block.isAir(bs, world, test) || block.isReplaceable(world, test)) {
						// dont add light if block is right below street light
						if (findy < -1) doAddAt = test;
					} else break;
				}
				// add if marked for add
				if (doAddAt != null) {
					world.setBlockState(doAddAt, Block.getBlockFromName("csm:lightupair").getDefaultState(), 3);
				}
			}
			// Not powered, remove light
			else {
				for (int findy = -1; findy >= -40; findy--) {
					BlockPos test = new BlockPos(pos.getX(), pos.getY() +findy, pos.getZ());
					IBlockState bs = world.getBlockState(test);
					// stop removing light once hit block
					if (bs.getBlock() == Block.getBlockFromName("csm:lightupair")) world.setBlockToAir(test);
				}
			}
		}
    @Override
    public void onBlockPlacedBy(World world, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
        world.setBlockState(pos, state.withProperty(FACING, getFacingFromEntity(pos, placer)), 2);
    }

    public static EnumFacing getFacingFromEntity(BlockPos clickedBlock, EntityLivingBase entity) {
        return EnumFacing.getFacingFromVector(
            (float) (entity.posX - clickedBlock.getX()),
            (float) (entity.posY - clickedBlock.getY()),
            (float) (entity.posZ - clickedBlock.getZ()));
    }

    @Override
    public IBlockState getStateFromMeta(int meta) {
        return getDefaultState()
                .withProperty(FACING, EnumFacing.getFront(meta & 7))
                .withProperty(POWERED, (meta & 8) != 0);
    }

    @Override
    public int getMetaFromState(IBlockState state) {
        return state.getValue(FACING).getIndex() + (state.getValue(POWERED) ? 8 : 0);
    }

    @Override
    protected BlockStateContainer createBlockState() {
        return new BlockStateContainer(this, FACING, POWERED);
    }

    @Override
    public int getLightValue(IBlockState state, IBlockAccess world, BlockPos pos){
    	return state.getValue(POWERED) == true ? 15 : 0;
    }